// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Response extends ethereum.Event {
  get params(): Response__Params {
    return new Response__Params(this);
  }
}

export class Response__Params {
  _event: Response;

  constructor(event: Response) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buildCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OnlyBuidlorsNft__s_memberToDataResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEnsName(): string {
    return this.value0;
  }

  getBuildCount(): BigInt {
    return this.value1;
  }
}

export class OnlyBuidlorsNft extends ethereum.SmartContract {
  static bind(address: Address): OnlyBuidlorsNft {
    return new OnlyBuidlorsNft("OnlyBuidlorsNft", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBuidlCount(memberAddr: Address): BigInt {
    let result = super.call(
      "getBuidlCount",
      "getBuidlCount(address):(uint256)",
      [ethereum.Value.fromAddress(memberAddr)],
    );

    return result[0].toBigInt();
  }

  try_getBuidlCount(memberAddr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuidlCount",
      "getBuidlCount(address):(uint256)",
      [ethereum.Value.fromAddress(memberAddr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEnsName(memberAddr: Address): string {
    let result = super.call("getEnsName", "getEnsName(address):(string)", [
      ethereum.Value.fromAddress(memberAddr),
    ]);

    return result[0].toString();
  }

  try_getEnsName(memberAddr: Address): ethereum.CallResult<string> {
    let result = super.tryCall("getEnsName", "getEnsName(address):(string)", [
      ethereum.Value.fromAddress(memberAddr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getEpicColor(): string {
    let result = super.call("getEpicColor", "getEpicColor():(string)", []);

    return result[0].toString();
  }

  try_getEpicColor(): ethereum.CallResult<string> {
    let result = super.tryCall("getEpicColor", "getEpicColor():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHasMinted(memberAddr: Address): boolean {
    let result = super.call("getHasMinted", "getHasMinted(address):(bool)", [
      ethereum.Value.fromAddress(memberAddr),
    ]);

    return result[0].toBoolean();
  }

  try_getHasMinted(memberAddr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getHasMinted", "getHasMinted(address):(bool)", [
      ethereum.Value.fromAddress(memberAddr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getLatestRequestId(): Bytes {
    let result = super.call(
      "getLatestRequestId",
      "getLatestRequestId():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_getLatestRequestId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getLatestRequestId",
      "getLatestRequestId():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getLatestTokenId(): BigInt {
    let result = super.call(
      "getLatestTokenId",
      "getLatestTokenId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getLatestTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestTokenId",
      "getLatestTokenId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLegendaryColor(): string {
    let result = super.call(
      "getLegendaryColor",
      "getLegendaryColor():(string)",
      [],
    );

    return result[0].toString();
  }

  try_getLegendaryColor(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getLegendaryColor",
      "getLegendaryColor():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRareColor(): string {
    let result = super.call("getRareColor", "getRareColor():(string)", []);

    return result[0].toString();
  }

  try_getRareColor(): ethereum.CallResult<string> {
    let result = super.tryCall("getRareColor", "getRareColor():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUncommonColor(): string {
    let result = super.call(
      "getUncommonColor",
      "getUncommonColor():(string)",
      [],
    );

    return result[0].toString();
  }

  try_getUncommonColor(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getUncommonColor",
      "getUncommonColor():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_donID(): Bytes {
    let result = super.call("s_donID", "s_donID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_s_donID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("s_donID", "s_donID():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_gasLimit(): BigInt {
    let result = super.call("s_gasLimit", "s_gasLimit():(uint32)", []);

    return result[0].toBigInt();
  }

  try_s_gasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("s_gasLimit", "s_gasLimit():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_lastRequestId(): Bytes {
    let result = super.call(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_s_lastRequestId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_memberToData(param0: Address): OnlyBuidlorsNft__s_memberToDataResult {
    let result = super.call(
      "s_memberToData",
      "s_memberToData(address):(string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new OnlyBuidlorsNft__s_memberToDataResult(
      result[0].toString(),
      result[1].toBigInt(),
    );
  }

  try_s_memberToData(
    param0: Address,
  ): ethereum.CallResult<OnlyBuidlorsNft__s_memberToDataResult> {
    let result = super.tryCall(
      "s_memberToData",
      "s_memberToData(address):(string,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OnlyBuidlorsNft__s_memberToDataResult(
        value[0].toString(),
        value[1].toBigInt(),
      ),
    );
  }

  s_requestIdToMemberAddress(param0: Bytes): Address {
    let result = super.call(
      "s_requestIdToMemberAddress",
      "s_requestIdToMemberAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toAddress();
  }

  try_s_requestIdToMemberAddress(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_requestIdToMemberAddress",
      "s_requestIdToMemberAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_source(): string {
    let result = super.call("s_source", "s_source():(string)", []);

    return result[0].toString();
  }

  try_s_source(): ethereum.CallResult<string> {
    let result = super.tryCall("s_source", "s_source():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  sendRequest(
    subscriptionId: BigInt,
    args: Array<string>,
    ensName: string,
  ): Bytes {
    let result = super.call(
      "sendRequest",
      "sendRequest(uint64,string[],string):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromStringArray(args),
        ethereum.Value.fromString(ensName),
      ],
    );

    return result[0].toBytes();
  }

  try_sendRequest(
    subscriptionId: BigInt,
    args: Array<string>,
    ensName: string,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "sendRequest",
      "sendRequest(uint64,string[],string):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromStringArray(args),
        ethereum.Value.fromString(ensName),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sendRequestOnBehalfOf(
    subscriptionId: BigInt,
    args: Array<string>,
    ensName: string,
    memberAddr: Address,
  ): Bytes {
    let result = super.call(
      "sendRequestOnBehalfOf",
      "sendRequestOnBehalfOf(uint64,string[],string,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromStringArray(args),
        ethereum.Value.fromString(ensName),
        ethereum.Value.fromAddress(memberAddr),
      ],
    );

    return result[0].toBytes();
  }

  try_sendRequestOnBehalfOf(
    subscriptionId: BigInt,
    args: Array<string>,
    ensName: string,
    memberAddr: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "sendRequestOnBehalfOf",
      "sendRequestOnBehalfOf(uint64,string[],string,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromStringArray(args),
        ethereum.Value.fromString(ensName),
        ethereum.Value.fromAddress(memberAddr),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  svgToImageURI(tokenId: BigInt): string {
    let result = super.call(
      "svgToImageURI",
      "svgToImageURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toString();
  }

  try_svgToImageURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "svgToImageURI",
      "svgToImageURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get donId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class HandleOracleFulfillmentCall extends ethereum.Call {
  get inputs(): HandleOracleFulfillmentCall__Inputs {
    return new HandleOracleFulfillmentCall__Inputs(this);
  }

  get outputs(): HandleOracleFulfillmentCall__Outputs {
    return new HandleOracleFulfillmentCall__Outputs(this);
  }
}

export class HandleOracleFulfillmentCall__Inputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get err(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall__Outputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }
}

export class MinNftOnBehalfOfCall extends ethereum.Call {
  get inputs(): MinNftOnBehalfOfCall__Inputs {
    return new MinNftOnBehalfOfCall__Inputs(this);
  }

  get outputs(): MinNftOnBehalfOfCall__Outputs {
    return new MinNftOnBehalfOfCall__Outputs(this);
  }
}

export class MinNftOnBehalfOfCall__Inputs {
  _call: MinNftOnBehalfOfCall;

  constructor(call: MinNftOnBehalfOfCall) {
    this._call = call;
  }

  get memberAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MinNftOnBehalfOfCall__Outputs {
  _call: MinNftOnBehalfOfCall;

  constructor(call: MinNftOnBehalfOfCall) {
    this._call = call;
  }
}

export class MintNftCall extends ethereum.Call {
  get inputs(): MintNftCall__Inputs {
    return new MintNftCall__Inputs(this);
  }

  get outputs(): MintNftCall__Outputs {
    return new MintNftCall__Outputs(this);
  }
}

export class MintNftCall__Inputs {
  _call: MintNftCall;

  constructor(call: MintNftCall) {
    this._call = call;
  }
}

export class MintNftCall__Outputs {
  _call: MintNftCall;

  constructor(call: MintNftCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SendRequestCall extends ethereum.Call {
  get inputs(): SendRequestCall__Inputs {
    return new SendRequestCall__Inputs(this);
  }

  get outputs(): SendRequestCall__Outputs {
    return new SendRequestCall__Outputs(this);
  }
}

export class SendRequestCall__Inputs {
  _call: SendRequestCall;

  constructor(call: SendRequestCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get args(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get ensName(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SendRequestCall__Outputs {
  _call: SendRequestCall;

  constructor(call: SendRequestCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SendRequestOnBehalfOfCall extends ethereum.Call {
  get inputs(): SendRequestOnBehalfOfCall__Inputs {
    return new SendRequestOnBehalfOfCall__Inputs(this);
  }

  get outputs(): SendRequestOnBehalfOfCall__Outputs {
    return new SendRequestOnBehalfOfCall__Outputs(this);
  }
}

export class SendRequestOnBehalfOfCall__Inputs {
  _call: SendRequestOnBehalfOfCall;

  constructor(call: SendRequestOnBehalfOfCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get args(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get ensName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get memberAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SendRequestOnBehalfOfCall__Outputs {
  _call: SendRequestOnBehalfOfCall;

  constructor(call: SendRequestOnBehalfOfCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
